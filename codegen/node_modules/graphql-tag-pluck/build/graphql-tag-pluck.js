require("source-map-support").install();
module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(1);


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gqlPluckFromFile", function() { return gqlPluckFromFile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "gqlPluckFromCodeString", function() { return gqlPluckFromCodeString; });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);
/* harmony import */ var _libs_babel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);
/* harmony import */ var _libs_fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8);
/* harmony import */ var _libs_path__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);
/* harmony import */ var _visitor__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(12);
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }






var gqlExtensions = ['.graphqls', '.graphql', '.gqls', '.gql'];
var jsExtensions = ['.js', '.jsx', '.ts', '.tsx', '.flow', '.flow.js', '.flow.jsx'];
var supportedExtensions = [].concat(gqlExtensions, jsExtensions);

supportedExtensions.toString = function toString() {
  return this.join(', ');
};

var gqlPluckFromFile = function gqlPluckFromFile(filePath) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (typeof filePath != 'string' && !(filePath instanceof String)) {
    throw TypeError('Provided file path must be a string');
  }

  var fileExt = Object(_libs_path__WEBPACK_IMPORTED_MODULE_3__["extname"])(filePath);

  if (!supportedExtensions.includes(fileExt)) {
    throw TypeError("Provided file type must be one of ".concat(supportedExtensions));
  }

  if (gqlExtensions.includes(fileExt)) {
    return _libs_fs__WEBPACK_IMPORTED_MODULE_2__["default"].readFile(filePath, {
      encoding: 'utf8'
    });
  }

  if (!(options instanceof Object)) {
    throw TypeError("Options arg must be an object");
  }

  filePath = Object(_libs_path__WEBPACK_IMPORTED_MODULE_3__["resolve"])(process.cwd(), filePath);
  options = _objectSpread({}, options, {
    fileExt: fileExt
  });

  if (options.useSync) {
    var code = _libs_fs__WEBPACK_IMPORTED_MODULE_2__["default"].readFileSync(filePath, {
      encoding: 'utf8'
    });
    var config = new _config__WEBPACK_IMPORTED_MODULE_0__["default"](code, options);
    return gqlPluckFromCodeString(code, config);
  }

  return _libs_fs__WEBPACK_IMPORTED_MODULE_2__["default"].readFile(filePath, {
    encoding: 'utf8'
  }).then(function (code) {
    var config = new _config__WEBPACK_IMPORTED_MODULE_0__["default"](code, options);
    return gqlPluckFromCodeString(code, config);
  });
};

gqlPluckFromFile.sync = function (filePath) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  options = _objectSpread({}, options, {
    useSync: true
  });
  return gqlPluckFromFile(filePath, options);
};

var gqlPluckFromCodeString = function gqlPluckFromCodeString(code) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (typeof code != 'string' && !(code instanceof String)) {
    throw TypeError('Provided code must be a string');
  }

  if (!(options instanceof Object)) {
    throw TypeError("Options arg must be an object");
  }

  if (options.fileExt) {
    if (gqlExtensions.includes(options.fileExt)) {
      return code;
    }

    if (!jsExtensions.includes(options.fileExt)) {
      throw TypeError("options.fileExt must be one of ".concat(supportedExtensions));
    }
  }

  var out = {};
  var config = new _config__WEBPACK_IMPORTED_MODULE_0__["default"](code, options);
  var ast = _libs_babel__WEBPACK_IMPORTED_MODULE_1__["default"].parse(code, config);
  var visitor = Object(_visitor__WEBPACK_IMPORTED_MODULE_4__["default"])(ast.code, out, config._options);
  _libs_babel__WEBPACK_IMPORTED_MODULE_1__["default"].traverse(ast, visitor);
  return out.returnValue;
};
/* harmony default export */ __webpack_exports__["default"] = ({
  fromFile: gqlPluckFromFile,
  fromCodeString: gqlPluckFromCodeString
});

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Config; });
function Config(code, options) {
  if (options instanceof Config) {
    return options;
  }

  var plugins = ['asyncGenerators', 'bigInt', 'classProperties', 'classPrivateProperties', 'classPrivateMethods', ['decorators', {
    decoratorsBeforeExport: true
  }], 'doExpressions', 'dynamicImport', 'exportDefaultFrom', 'exportNamespaceFrom', 'functionBind', 'functionSent', 'importMeta', 'logicalAssignment', 'nullishCoalescingOperator', 'numericSeparator', 'objectRestSpread', 'optionalCatchBinding', 'optionalChaining', ['pipelineOperator', {
    proposal: 'smart'
  }], 'throwExpressions']; // { all: true } option is bullshit thus I do it manually, just in case
  // I still specify it

  var flowPlugins = [['flow', {
    all: true
  }], 'flowComments']; // If line has @flow header, include flow plug-ins

  var dynamicFlowPlugins = /^\/\/ *@flow *\n/.test(code) || /^\/\* *@flow *\*\/ *\n/.test(code) ? flowPlugins : [];

  switch (options.fileExt) {
    case '.ts':
      plugins.push('typescript');
      break;

    case '.tsx':
      plugins.push('typescript', 'jsx');
      break;
    // Adding .jsx extension by default because it doesn't affect other syntax features
    // (unlike .tsx) and because people are seem to use it with regular file extensions
    // (e.g. .js) see https://github.com/dotansimha/graphql-code-generator/issues/1967

    case '.js':
      plugins.push.apply(plugins, ['jsx'].concat(dynamicFlowPlugins));
      break;

    case '.jsx':
      plugins.push.apply(plugins, ['jsx'].concat(dynamicFlowPlugins));
      break;

    case '.flow.js':
      plugins.push.apply(plugins, ['jsx'].concat(flowPlugins));
      break;

    case '.flow.jsx':
      plugins.push.apply(plugins, ['jsx'].concat(flowPlugins));
      break;

    case '.flow':
      plugins.push.apply(plugins, ['jsx'].concat(flowPlugins));
      break;

    default:
      plugins.push.apply(plugins, ['jsx'].concat(dynamicFlowPlugins));
      break;
  } // The _options filed will be used to retrieve the original options.
  // Useful when we wanna get not config related options later on


  return Object.assign(this, {
    _options: options,
    sourceType: 'module',
    plugins: plugins,
    allowUndeclaredExports: true
  });
}

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "traverse", function() { return traverse; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parse", function() { return parse; });
/* harmony import */ var _babel_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
/* harmony import */ var _babel_parser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_parser__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _babel_traverse__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var _babel_traverse__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_traverse__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(6);
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }




var traverse = _babel_traverse__WEBPACK_IMPORTED_MODULE_1___default.a;
var parse = function parse(code, config) {
  // The 'typescript' plug-in has few bugs... It's just better to use the native one
  // even though it affects performance
  if (config.plugins.includes('typescript')) {
    var ts;

    try {
      ts = __webpack_require__(7);
    } catch (e) {
      throw Error(Object(_utils__WEBPACK_IMPORTED_MODULE_2__["freeText"])("\n        GraphQL template literals cannot be plucked from a TypeScript code without having the \"typescript\" package installed.\n        Please install it and try again.\n\n        Via NPM:\n\n            $ npm install typescript\n\n        Via Yarn:\n\n            $ yarn add typescript\n      "));
    }

    code = ts.transpileModule(code, {
      compilerOptions: {
        target: ts.ScriptTarget.ES2018,
        // "preserve" mode would be more correct, but it will keep not transpile generic
        // React.Components which are provided with null or undefined e.g. <Foo<undefined />>
        jsx: config.plugins.includes('jsx') && 'react'
      }
    }).outputText;
    var plugins = config.plugins.slice();
    var tsIndex = plugins.indexOf('typescript');
    plugins.splice(tsIndex, 1);
    config = _objectSpread({}, config, {
      plugins: plugins
    });
  }

  var ast = Object(_babel_parser__WEBPACK_IMPORTED_MODULE_0__["parse"])(code, config); // Necessary to get the original code in case it was transformed by TypeScript

  ast.code = code;
  return ast;
};
/* harmony default export */ __webpack_exports__["default"] = ({
  traverse: traverse,
  parse: parse
});

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("@babel/parser");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = require("@babel/traverse");

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "freeText", function() { return freeText; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "splitWords", function() { return splitWords; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toUpperFirst", function() { return toUpperFirst; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toCamelCase", function() { return toCamelCase; });
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

// Will use the shortest indention as an axis
var freeText = function freeText(text) {
  if (text instanceof Array) {
    text = text.join('');
  } // This will allow inline text generation with external functions, same as ctrl+shift+c
  // As long as we surround the inline text with ==>text<==


  text = text.replace(/( *)==>((?:.|\n)*?)<==/g, function (match, baseIndent, content) {
    return content.split('\n').map(function (line) {
      return "".concat(baseIndent).concat(line);
    }).join('\n');
  });
  var lines = text.split('\n');
  var minIndent = lines.filter(function (line) {
    return line.trim();
  }).reduce(function (minIndent, line) {
    var currIndent = line.match(/^ */)[0].length;
    return currIndent < minIndent ? currIndent : minIndent;
  }, Infinity);
  return lines.map(function (line) {
    return line.slice(minIndent);
  }).join('\n').trim().replace(/\n +\n/g, '\n\n');
}; // foo_barBaz -> ['foo', 'bar', 'Baz']

var splitWords = function splitWords(str) {
  return str.replace(/[A-Z]/, ' $&').split(/[^a-zA-Z0-9]+/);
}; // upper -> Upper

var toUpperFirst = function toUpperFirst(str) {
  return str.substr(0, 1).toUpperCase() + str.substr(1).toLowerCase();
}; // foo-bar-baz -> fooBarBaz

var toCamelCase = function toCamelCase(str) {
  var words = splitWords(str);
  var first = words.shift().toLowerCase();
  var rest = words.map(toUpperFirst);
  return [first].concat(_toConsumableArray(rest)).join('');
};

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = require("typescript");

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readFileSync", function() { return readFileSync; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "writeFileSync", function() { return writeFileSync; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "readFile", function() { return readFile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "writeFile", function() { return writeFile; });
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(9);
/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(fs__WEBPACK_IMPORTED_MODULE_0__);

var readFileSync = fs__WEBPACK_IMPORTED_MODULE_0___default.a.readFileSync;
var writeFileSync = fs__WEBPACK_IMPORTED_MODULE_0___default.a.writeFileSync;
var readFile = function readFile() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return new Promise(function (resolve, reject) {
    fs__WEBPACK_IMPORTED_MODULE_0___default.a.readFile.apply(fs__WEBPACK_IMPORTED_MODULE_0___default.a, args.concat([function (err, content) {
      if (err) {
        reject(err);
      } else {
        resolve(content);
      }
    }]));
  });
};
var writeFile = function writeFile() {
  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return new Promise(function (resolve, reject) {
    fs__WEBPACK_IMPORTED_MODULE_0___default.a.writeFile.apply(fs__WEBPACK_IMPORTED_MODULE_0___default.a, args.concat([function (err) {
      if (err) {
        reject(err);
      } else {
        resolve();
      }
    }]));
  });
};
/* harmony default export */ __webpack_exports__["default"] = ({
  readFile: readFile,
  readFileSync: readFileSync,
  writeFile: writeFile,
  writeFileSync: writeFileSync
});

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = require("fs");

/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "resolve", function() { return resolve; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extname", function() { return extname; });
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(11);
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_0__);

var resolve = path__WEBPACK_IMPORTED_MODULE_0___default.a.resolve;
var extname = function extname(filePath) {
  var partials = filePath.split('.');
  var ext = '.' + partials.pop();

  if (partials.length > 1 && partials[partials.length - 1] == 'flow') {
    ext = '.' + partials.pop() + ext;
  }

  return ext;
};

/***/ }),
/* 11 */
/***/ (function(module, exports) {

module.exports = require("path");

/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _babel_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(13);
/* harmony import */ var _babel_types__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_types__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6);
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }



var defaults = {
  modules: [{
    name: 'graphql-tag'
  }, {
    name: 'graphql-tag.macro'
  }, {
    name: 'gql',
    identifier: '@apollo/client'
  }, {
    name: 'gatsby',
    identifier: 'graphql'
  }, {
    name: 'apollo-server-express',
    identifier: 'gql'
  }, {
    name: 'apollo-server',
    identifier: 'gql'
  }, {
    name: 'react-relay',
    identifier: 'graphql'
  }, {
    name: 'apollo-boost',
    identifier: 'gql'
  }, {
    name: 'apollo-server-koa',
    identifier: 'gql'
  }, {
    name: 'apollo-server-hapi',
    identifier: 'gql'
  }, {
    name: 'apollo-server-fastify',
    identifier: 'gql'
  }, {
    name: ' apollo-server-lambda',
    identifier: 'gql'
  }, {
    name: 'apollo-server-micro',
    identifier: 'gql'
  }, {
    name: 'apollo-server-azure-functions',
    identifier: 'gql'
  }, {
    name: 'apollo-server-cloud-functions',
    identifier: 'gql'
  }, {
    name: 'apollo-server-cloudflare',
    identifier: 'gql'
  }, {
    name: 'graphql.macro',
    identifier: 'gql'
  }],
  gqlMagicComment: 'graphql'
};
/* harmony default export */ __webpack_exports__["default"] = (function (code, out) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  // Apply defaults to options
  var _defaults$options = _objectSpread({}, defaults, options),
      modules = _defaults$options.modules,
      globalGqlIdentifierName = _defaults$options.globalGqlIdentifierName,
      gqlMagicComment = _defaults$options.gqlMagicComment; // Prevent case related potential errors


  gqlMagicComment = gqlMagicComment.toLowerCase(); // normalize `name` and `identifier` values

  modules = modules.map(function (mod) {
    return {
      name: mod.name,
      identifier: mod.identifier && mod.identifier.toLowerCase()
    };
  });
  globalGqlIdentifierName = globalGqlIdentifierName && globalGqlIdentifierName.toLowerCase(); // Keep imported identifiers
  // import gql from 'graphql-tag' -> gql
  // import { graphql } from 'gatsby' -> graphql
  // Will result with ['gql', 'graphql']

  var definedIdentifierNames = []; // Will accumulate all template literals

  var gqlTemplateLiterals = []; // Check if package is registered

  function isValidPackage(name) {
    return modules.some(function (pkg) {
      return pkg.name && name && pkg.name.toLowerCase() === name.toLowerCase();
    });
  } // Check if identifier is defined and imported from registered packages


  function isValidIdentifier(name) {
    return definedIdentifierNames.some(function (id) {
      return id === name;
    }) || globalGqlIdentifierName && name === globalGqlIdentifierName;
  }

  var pluckStringFromFile = function pluckStringFromFile(_ref) {
    var start = _ref.start,
        end = _ref.end;
    return Object(_utils__WEBPACK_IMPORTED_MODULE_1__["freeText"])(code // Slice quotes
    .slice(start + 1, end - 1) // Erase string interpolations as we gonna export everything as a single
    // string anyways
    .replace(/\$\{[^}]*\}/g, '').split('\\`').join('`'));
  }; // Push all template literals leaded by graphql magic comment
  // e.g. /* GraphQL */ `query myQuery {}` -> query myQuery {}


  var pluckMagicTemplateLiteral = function pluckMagicTemplateLiteral(node, takeExpression) {
    var leadingComments = node.leadingComments;
    if (!leadingComments) return;
    if (!leadingComments.length) return;
    var leadingComment = leadingComments[leadingComments.length - 1];
    var leadingCommentValue = leadingComment.value.trim().toLowerCase();
    if (leadingCommentValue != gqlMagicComment) return;
    var gqlTemplateLiteral = pluckStringFromFile(takeExpression ? node.expression : node);

    if (gqlTemplateLiteral) {
      gqlTemplateLiterals.push(gqlTemplateLiteral);
    }
  };

  return {
    CallExpression: {
      enter: function enter(path) {
        // Find the identifier name used from graphql-tag, commonJS
        // e.g. import gql from 'graphql-tag' -> gql
        if (path.node.callee.name == 'require' && isValidPackage(path.node.arguments[0].value)) {
          if (!_babel_types__WEBPACK_IMPORTED_MODULE_0__["isVariableDeclarator"](path.parent)) return;
          if (!_babel_types__WEBPACK_IMPORTED_MODULE_0__["isIdentifier"](path.parent.id)) return;
          definedIdentifierNames.push(path.parent.id.name);
          return;
        }

        var arg0 = path.node.arguments[0]; // Push strings template literals to gql calls
        // e.g. gql(`query myQuery {}`) -> query myQuery {}

        if (_babel_types__WEBPACK_IMPORTED_MODULE_0__["isIdentifier"](path.node.callee) && isValidIdentifier(path.node.callee.name) && _babel_types__WEBPACK_IMPORTED_MODULE_0__["isTemplateLiteral"](arg0)) {
          var gqlTemplateLiteral = pluckStringFromFile(arg0); // If the entire template was made out of interpolations it should be an empty
          // string by now and thus should be ignored

          if (gqlTemplateLiteral) {
            gqlTemplateLiterals.push(gqlTemplateLiteral);
          }
        }
      }
    },
    ImportDeclaration: {
      enter: function enter(path) {
        // Find the identifier name used from graphql-tag, es6
        // e.g. import gql from 'graphql-tag' -> gql
        if (!isValidPackage(path.node.source.value)) return;
        var moduleNode = modules.find(function (pkg) {
          return pkg.name.toLowerCase() === path.node.source.value.toLowerCase();
        });
        var gqlImportSpecifier = path.node.specifiers.find(function (importSpecifier) {
          // When it's a default import and registered package has no named identifier
          if (_babel_types__WEBPACK_IMPORTED_MODULE_0__["isImportDefaultSpecifier"](importSpecifier) && !moduleNode.identifier) {
            return true;
          } // When it's a named import that matches registered package's identifier


          if (_babel_types__WEBPACK_IMPORTED_MODULE_0__["isImportSpecifier"](importSpecifier) && importSpecifier.imported.name === moduleNode.identifier) {
            return true;
          }

          return false;
        });
        if (!gqlImportSpecifier) return;
        definedIdentifierNames.push(gqlImportSpecifier.local.name);
      }
    },
    ExpressionStatement: {
      exit: function exit(path) {
        // Push all template literals leaded by graphql magic comment
        // e.g. /* GraphQL */ `query myQuery {}` -> query myQuery {}
        if (!_babel_types__WEBPACK_IMPORTED_MODULE_0__["isTemplateLiteral"](path.node.expression)) return;
        pluckMagicTemplateLiteral(path.node, true);
      }
    },
    TemplateLiteral: {
      exit: function exit(path) {
        pluckMagicTemplateLiteral(path.node);
      }
    },
    TaggedTemplateExpression: {
      exit: function exit(path) {
        // Push all template literals provided to the found identifier name
        // e.g. gql `query myQuery {}` -> query myQuery {}
        if (!_babel_types__WEBPACK_IMPORTED_MODULE_0__["isIdentifier"](path.node.tag) || !isValidIdentifier(path.node.tag.name)) {
          return;
        }

        var gqlTemplateLiteral = pluckStringFromFile(path.node.quasi);

        if (gqlTemplateLiteral) {
          gqlTemplateLiterals.push(gqlTemplateLiteral);
        }
      }
    },
    exit: function exit() {
      out.returnValue = gqlTemplateLiterals.join('\n\n');
    }
  };
});

/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = require("@babel/types");

/***/ })
/******/ ]);
//# sourceMappingURL=graphql-tag-pluck.js.map