'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

const graphql = require('graphql');
const visitorPluginCommon = require('@graphql-codegen/visitor-plugin-common');
const typescript = require('@graphql-codegen/typescript');
const autoBind = _interopDefault(require('auto-bind'));

class TypeScriptOperationVariablesToObject extends typescript.TypeScriptOperationVariablesToObject {
    formatTypeString(fieldType, isNonNullType, hasDefaultValue) {
        return fieldType;
    }
}

class TypeScriptSelectionSetProcessor extends visitorPluginCommon.BaseSelectionSetProcessor {
    transformPrimitiveFields(schemaType, fields) {
        if (fields.length === 0) {
            return [];
        }
        const parentName = (this.config.namespacedImportName ? `${this.config.namespacedImportName}.` : '') +
            this.config.convertName(schemaType.name, {
                useTypesPrefix: true,
            });
        return [`Pick<${parentName}, ${fields.map(field => `'${field}'`).join(' | ')}>`];
    }
    transformTypenameField(type, name) {
        return [`{ ${name}: ${type} }`];
    }
    transformAliasesPrimitiveFields(schemaType, fields) {
        if (fields.length === 0) {
            return [];
        }
        const parentName = (this.config.namespacedImportName ? `${this.config.namespacedImportName}.` : '') +
            this.config.convertName(schemaType.name, {
                useTypesPrefix: true,
            });
        return [
            `{ ${fields
                .map(aliasedField => {
                const value = aliasedField.fieldName === '__typename' ? `'${schemaType.name}'` : `${parentName}['${aliasedField.fieldName}']`;
                return `${this.config.formatNamedField(aliasedField.alias)}: ${value}`;
            })
                .join(', ')} }`,
        ];
    }
    transformLinkFields(fields) {
        if (fields.length === 0) {
            return [];
        }
        return [`{ ${fields.map(field => `${this.config.formatNamedField(field.alias || field.name)}: ${field.selectionSet}`).join(', ')} }`];
    }
}

class TypeScriptDocumentsVisitor extends visitorPluginCommon.BaseDocumentsVisitor {
    constructor(schema, config, allFragments) {
        super(config, {
            noExport: visitorPluginCommon.getConfigValue(config.noExport, false),
            avoidOptionals: typeof config.avoidOptionals === 'boolean' ? visitorPluginCommon.getConfigValue(config.avoidOptionals, false) : false,
            immutableTypes: visitorPluginCommon.getConfigValue(config.immutableTypes, false),
            nonOptionalTypename: visitorPluginCommon.getConfigValue(config.nonOptionalTypename, false),
        }, schema);
        autoBind(this);
        const clearOptional = (str) => {
            const prefix = this.config.namespacedImportName ? `${this.config.namespacedImportName}\.` : '';
            const rgx = new RegExp(`^${prefix}Maybe<(.*?)>$`, 'is');
            if (str.startsWith(`${this.config.namespacedImportName ? `${this.config.namespacedImportName}.` : ''}Maybe`)) {
                return str.replace(rgx, '$1');
            }
            return str;
        };
        const wrapTypeWithModifiers = (baseType, type) => {
            const prefix = this.config.namespacedImportName ? `${this.config.namespacedImportName}.` : '';
            if (graphql.isNonNullType(type)) {
                return clearOptional(wrapTypeWithModifiers(baseType, type.ofType));
            }
            else if (graphql.isListType(type)) {
                const innerType = wrapTypeWithModifiers(baseType, type.ofType);
                return `${prefix}Maybe<${this.config.immutableTypes ? 'ReadonlyArray' : 'Array'}<${innerType}>>`;
            }
            else {
                return `${prefix}Maybe<${baseType}>`;
            }
        };
        const processorConfig = {
            namespacedImportName: this.config.namespacedImportName,
            convertName: this.convertName.bind(this),
            enumPrefix: this.config.enumPrefix,
            scalars: this.scalars,
            formatNamedField: (name) => (this.config.immutableTypes ? `readonly ${name}` : name),
            wrapTypeWithModifiers,
        };
        const processor = new (config.preResolveTypes ? visitorPluginCommon.PreResolveTypesProcessor : TypeScriptSelectionSetProcessor)(processorConfig);
        this.setSelectionSetHandler(new visitorPluginCommon.SelectionSetToObject(processor, this.scalars, this.schema, this.convertName.bind(this), allFragments, this.config));
        const enumsNames = Object.keys(schema.getTypeMap()).filter(typeName => graphql.isEnumType(schema.getType(typeName)));
        this.setVariablesTransformer(new TypeScriptOperationVariablesToObject(this.scalars, this.convertName.bind(this), this.config.avoidOptionals, this.config.immutableTypes, this.config.namespacedImportName, enumsNames, this.config.enumPrefix, this.config.enumValues));
        this._declarationBlockConfig = {
            ignoreExport: this.config.noExport,
        };
    }
    getPunctuation(declarationKind) {
        return ';';
    }
}

const plugin = (schema, rawDocuments, config) => {
    const documents = config.flattenGeneratedTypes ? visitorPluginCommon.optimizeOperations(schema, rawDocuments) : rawDocuments;
    const allAst = graphql.concatAST(documents.map(v => v.document));
    const allFragments = [
        ...allAst.definitions.filter(d => d.kind === graphql.Kind.FRAGMENT_DEFINITION).map(fragmentDef => ({ node: fragmentDef, name: fragmentDef.name.value, onType: fragmentDef.typeCondition.name.value, isExternal: false })),
        ...(config.externalFragments || []),
    ];
    const visitorResult = graphql.visit(allAst, {
        leave: new TypeScriptDocumentsVisitor(schema, config, allFragments),
    });
    const result = visitorResult.definitions.join('\n');
    if (config.globalNamespace) {
        return `
    declare global { 
      ${result} 
    }
          `;
    }
    else {
        return result;
    }
};

exports.TypeScriptDocumentsVisitor = TypeScriptDocumentsVisitor;
exports.plugin = plugin;
